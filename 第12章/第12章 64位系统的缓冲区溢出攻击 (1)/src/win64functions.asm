; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	doCommandLineAsm
EXTRN	puts:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_CreateProcessA:PROC

_TEXT	SEGMENT

doCommandLineAsm PROC
    push    rbp
    mov     rbp,rsp
    mov     rcx,00657865h   ;
    push    rcx;
    mov     rcx,2e64617065746f6eh; "notepad.exe"
    push    rcx;
    mov     rcx,rsp;
    
    call    doCreateProcessA;   //调用CreateProcessA，启动一个新进程
    
    mov     rsp,rbp
    pop     rbp
    xor     rax,rax
    ret

;=====================================================================
doCreateProcessA:
    push    rbp
    mov     rbp,rsp
    sub	    rsp,20h
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
  ; set the buffer to zero  
    mov     rdi, rsp;
    push    29;  232/8=29
    pop     rcx;
    xor     rax,rax;
  stack_zero:
    mov     QWORD PTR [rdi+rcx*8], rax;
  loop    stack_zero;

	mov	DWORD PTR 112[rsp], 104			; 00000068H
	mov	eax, 1
	mov	WORD PTR 112[rsp+64], ax
	mov	DWORD PTR 112[rsp+60], 1
	lea	rax, QWORD PTR 80[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR 112[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR 240[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateProcessA
	mov	DWORD PTR 104[rsp], eax
	cmp	DWORD PTR 104[rsp], 0
	je	SHORT END_doCommandL
	mov	rcx, QWORD PTR 80[rsp]
	call	QWORD PTR __imp_CloseHandle
	mov	rcx, QWORD PTR 80[rsp+8]
	call	QWORD PTR __imp_CloseHandle
END_doCommandL:
	;add	rsp, 232				; 000000e8H
    mov     rax, [rsp-8]
    mov     rsp,rbp
    pop     rbp
    ;xor     rax,rax
END_doCreateProcessA:
    ret
;=====================================================================

    push    rbp
    mov     rbp,rsp

    mov     rsp,rbp
    pop     rbp
    xor     rax,rax
    ret
doCommandLineAsm ENDP

_TEXT	ENDS

PUBLIC	getBaseAddress
_TEXT	SEGMENT
getBaseAddress  PROC
  get_base_address:
    mov     rax,[rsp];
    xor     rbx,rbx;
    mov     ebx,[rax-4];
    add     rax,rbx;
    cmp     ebx,80000000h
  jb      line_105;
    mov     rcx,100000000h;
    sub     rax,rcx;
  line_105:
    ret ;
getBaseAddress ENDP;
_TEXT	ENDS

PUBLIC	myPutsAsm
_TEXT	SEGMENT
myPutsAsm  PROC
;    push    rbp
    mov     rbp,rsp

    sub	rsp, 50					; 00000028H
    call	puts;
;    add	rsp, 50

    mov     rax,[rsp-8];
    xor     rbx,rbx;
    mov     ebx,[rax-4];
    add     rax,rbx;
    cmp     ebx,80000000h
  jb      line_121;
    mov     rdx,100000000h;
    sub     rax,rdx;
  line_121:
    mov     rsp,rbp
;    pop     rbp
    ret ;
myPutsAsm ENDP;
_TEXT	ENDS

END
